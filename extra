
# get fasta files ###########
url = f"{base_url}/{assembly_path}/{release}/fasta/{species}/{seqtype}/"
with urllib.request.urlopen(url) as response:
    html_content = response.read()

soup = BeautifulSoup(html_content, "html.parser")
ALL_FILES = list([link['href'] for link in soup.find_all('a') if link.get('href') and not link['href'].endswith('/')])

# patterns fasta file ########
fasta_patterns_include = config["genome"]["fasta"]["file_patterns_include"]
fasta_patterns_exclude = config["genome"]["fasta"]["file_patterns_exclude"]

fasta_to_keep = re.compile('|'.join(fasta_patterns_include))
fasta_to_remove = re.compile('|'.join(fasta_patterns_exclude))

fasta_download = [s for s in ALL_FILES if re.search(fasta_to_keep, s)]
fasta_download = [s for s in fasta_download if not re.search(fasta_to_remove, s)]
only_fasta = [re.sub(r'\.gz$', '', fasta) for fasta in fasta_download if re.search(r'\.fa\.gz$', fasta)]


# get anno files ###########
url = f"{base_url}/{assembly_path}/{release}/gtf/{species}/"
with urllib.request.urlopen(url) as response:
    html_content = response.read()

soup = BeautifulSoup(html_content, "html.parser")
ALL_FILES_ANNO = list([link['href'] for link in soup.find_all('a') if link.get('href') and not link['href'].endswith('/')])

# patterns anno file ########
anno_patterns_include = config["genome"]["annotation"]["file_patterns_include"]
anno_patterns_exclude = config["genome"]["annotation"]["file_patterns_exclude"]

anno_to_keep = re.compile('|'.join(anno_patterns_include))
anno_to_remove = re.compile('|'.join(anno_patterns_exclude))

anno_download = [s for s in ALL_FILES_ANNO if re.search(anno_to_keep, s)]
anno_download = [s for s in anno_download if not re.search(anno_to_remove, s)]
anno_extensionless = [os.path.splitext(os.path.splitext(path)[0])[0] for path in anno_download]


print("\n\n" + "Running for " + assembly + " " + release + " " + species + " " + seqtype)


#################
#### Tagrets ####
#################


# Define paths for genome-related files
if config["genome"]["fasta"]["download"]:
    ALL_FA = expand(
        [os.path.join(genome_download_path, species, assembly, release, seqtype, name) for name in only_fasta]
    )

if config["genome"]["annotation"]["download"]:
    ALL_ANNO = expand(
        [os.path.join(genome_download_path, species, assembly, release, "annotation", name, ".gtf") for name in anno_extensionless]
    )

# Define paths for index files based on configuration
if config["indices"]["bowtie1"]["run"]:
    ALL_BOWTIE1 = [
        os.path.join(
            indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt"
        ) for i in range(1, 5)
    ] + [
        os.path.join(
            indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt"
        ) for i in range(1, 3)
    ]

if config["indices"]["bowtie2"]["run"]:
    ALL_BOWTIE2 = [
        os.path.join(
            indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2"
        ) for i in range(1, 5)
    ] + [
        os.path.join(
            indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2"
        ) for i in range(1, 3)
    ]

if config["indices"]["bwa"]["run"]:
    ALL_BWA = os.path.join(
        indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa"
    )

if config["indices"]["kallisto"]["run"]:
    ALL_KALLISTO = os.path.join(
        indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx"
    )

if config["indices"]["star"]["run"]:
    ALL_STAR = os.path.join(
        indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA"
    )

if config["indices"]["cellranger"]["run"]:
    ALL_CELLRANGER = os.path.join(
        indices_build_path, "indices", "cellranger", species, assembly, release, seqtype, "**"
    )

if config["indices"]["cellranger_vdj"]["run"]:
    ALL_CELLRANGER_VDJ = os.path.join(
        indices_build_path, "indices", "cellranger_vdj", species, assembly, release, seqtype, "**"
    )

# Define paths for additional annotation files based on configuration
if config["annotation_files"]["gene_transcript_relation"]:
    GT = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"),
        file=anno_extensionless
    )

if config["annotation_files"]["bed"]:
    BED = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.bed"),
        file=anno_extensionless
    )

if config["annotation_files"]["refflat"]:
    REFFLAT = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.refflat"),
        file=anno_extensionless
    )

if config["annotation_files"]["igv"]:
    IGV_GTF = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.igv.gtf"),
        file=anno_extensionless
    )


ALL_FA, ALL_ANNO, ALL_BOWTIE1, ALL_BOWTIE2, ALL_BWA, ALL_KALLISTO, ALL_STAR, ALL_CELLRANGER, ALL_CELLRANGER_VDJ, GT, BED, REFFLAT, IGV = ([] for i in range(13))

if config["genome"]["fasta"]["download"]: ALL_FA = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file = only_fasta)
if config["genome"]["annotation"]["download"]: ALL_ANNO = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless)

if config["indices"]["bowtie1"]["run"]: ALL_BOWTIE1 = [os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt") for i in range(1, 5)], [os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt") for i in range(1, 3)]
if config["indices"]["bowtie2"]["run"]: ALL_BOWTIE2 = [os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2") for i in range(1, 5)] + [os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2") for i in range(1, 3)]
if config["indices"]["bwa"]["run"]: ALL_BWA = os.path.join(indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa")
if config["indices"]["kallisto"]["run"]: ALL_KALLISTO = os.path.join(indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx")
if config["indices"]["star"]["run"]: ALL_STAR = os.path.join(indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA")
if config["indices"]["cellranger"]["run"]: ALL_CELLRANGER = os.path.join(indices_build_path, "indices", "cellranger", species, assembly, release, seqtype, "**")
if config["indices"]["cellranger_vdj"]["run"]: ALL_CELLRANGER_VDJ = os.path.join(indices_build_path, "indices", "cellranger_vdj", species, assembly, release, seqtype, "**")

if config["annotation_files"]["gene_transcript_relation"]: GT = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"), file = anno_extensionless)
if config["annotation_files"]["bed"]: BED = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.bed"), file = anno_extensionless)
if config["annotation_files"]["refflat"]: REFFLAT = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.refflat"), file = anno_extensionless)
if config["annotation_files"]["igv"]: IGV = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.igv.gtf"), file = anno_extensionless)


#################
##### Rules #####
#################


rule all:
    input:
        ALL_FA,
        ALL_ANNO,
        ALL_BOWTIE1,
        ALL_BOWTIE2,
        ALL_BWA,
        ALL_KALLISTO,
        ALL_STAR,
        ALL_CELLRANGER,
        ALL_CELLRANGER_VDJ,
        GT,
        BED,
        REFFLAT,
        IGV


        #expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file=only_fasta), 
        #[os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt") for i in range(1, 5)] +
        #[os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt") for i in range(1, 3)] +
        #[os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2") for i in range(1, 5)] +
        #[os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2") for i in range(1, 3)],
        #os.path.join(indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa"),
        #os.path.join(indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA"),
        #os.path.join(indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx"),
        #expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless),
        #expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"), file = anno_extensionless)

# downloads #######

# Index building ###########
rule decompress:
    input:
        fasta_files_gz = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}.gz"), file = only_fasta),
        gtf_file_gz = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf.gz"), file = anno_extensionless)

    output:
        fasta_files = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file = only_fasta),
        gtf_file = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless)

    run:
        shell(
            """
            gzip -df {input}
            """
            )
