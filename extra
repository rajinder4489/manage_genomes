
#################
#### Tagrets ####
#################


# Define paths for genome-related files
if config["genome"]["fasta"]["download"]:
    ALL_FA = expand(
        [os.path.join(genome_download_path, species, assembly, release, seqtype, name) for name in only_fasta]
    )

if config["genome"]["annotation"]["download"]:
    ALL_ANNO = expand(
        [os.path.join(genome_download_path, species, assembly, release, "annotation", name, ".gtf") for name in anno_extensionless]
    )

# Define paths for index files based on configuration
if config["indices"]["bowtie1"]["run"]:
    ALL_BOWTIE1 = [
        os.path.join(
            indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt"
        ) for i in range(1, 5)
    ] + [
        os.path.join(
            indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt"
        ) for i in range(1, 3)
    ]

if config["indices"]["bowtie2"]["run"]:
    ALL_BOWTIE2 = [
        os.path.join(
            indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2"
        ) for i in range(1, 5)
    ] + [
        os.path.join(
            indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2"
        ) for i in range(1, 3)
    ]

if config["indices"]["bwa"]["run"]:
    ALL_BWA = os.path.join(
        indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa"
    )

if config["indices"]["kallisto"]["run"]:
    ALL_KALLISTO = os.path.join(
        indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx"
    )

if config["indices"]["star"]["run"]:
    ALL_STAR = os.path.join(
        indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA"
    )

if config["indices"]["cellranger"]["run"]:
    ALL_CELLRANGER = os.path.join(
        indices_build_path, "indices", "cellranger", species, assembly, release, seqtype, "**"
    )

if config["indices"]["cellranger_vdj"]["run"]:
    ALL_CELLRANGER_VDJ = os.path.join(
        indices_build_path, "indices", "cellranger_vdj", species, assembly, release, seqtype, "**"
    )

# Define paths for additional annotation files based on configuration
if config["annotation_files"]["gene_transcript_relation"]:
    GT = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"),
        file=anno_extensionless
    )

if config["annotation_files"]["bed"]:
    BED = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.bed"),
        file=anno_extensionless
    )

if config["annotation_files"]["refflat"]:
    REFFLAT = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.refflat"),
        file=anno_extensionless
    )

if config["annotation_files"]["igv"]:
    IGV_GTF = expand(
        os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.igv.gtf"),
        file=anno_extensionless
    )


ALL_FA, ALL_ANNO, ALL_BOWTIE1, ALL_BOWTIE2, ALL_BWA, ALL_KALLISTO, ALL_STAR, ALL_CELLRANGER, ALL_CELLRANGER_VDJ, GT, BED, REFFLAT, IGV = ([] for i in range(13))

if config["genome"]["fasta"]["download"]: ALL_FA = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file = only_fasta)
if config["genome"]["annotation"]["download"]: ALL_ANNO = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless)

if config["indices"]["bowtie1"]["run"]: ALL_BOWTIE1 = [os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt") for i in range(1, 5)], [os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt") for i in range(1, 3)]
if config["indices"]["bowtie2"]["run"]: ALL_BOWTIE2 = [os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2") for i in range(1, 5)] + [os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2") for i in range(1, 3)]
if config["indices"]["bwa"]["run"]: ALL_BWA = os.path.join(indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa")
if config["indices"]["kallisto"]["run"]: ALL_KALLISTO = os.path.join(indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx")
if config["indices"]["star"]["run"]: ALL_STAR = os.path.join(indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA")
if config["indices"]["cellranger"]["run"]: ALL_CELLRANGER = os.path.join(indices_build_path, "indices", "cellranger", species, assembly, release, seqtype, "**")
if config["indices"]["cellranger_vdj"]["run"]: ALL_CELLRANGER_VDJ = os.path.join(indices_build_path, "indices", "cellranger_vdj", species, assembly, release, seqtype, "**")

if config["annotation_files"]["gene_transcript_relation"]: GT = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"), file = anno_extensionless)
if config["annotation_files"]["bed"]: BED = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.bed"), file = anno_extensionless)
if config["annotation_files"]["refflat"]: REFFLAT = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.refflat"), file = anno_extensionless)
if config["annotation_files"]["igv"]: IGV = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.igv.gtf"), file = anno_extensionless)


#################
##### Rules #####
#################


rule all:
    input:
        ALL_FA,
        ALL_ANNO,
        ALL_BOWTIE1,
        ALL_BOWTIE2,
        ALL_BWA,
        ALL_KALLISTO,
        ALL_STAR,
        ALL_CELLRANGER,
        ALL_CELLRANGER_VDJ,
        GT,
        BED,
        REFFLAT,
        IGV


        #expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file=only_fasta), 
        #[os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.{i}.ebwt") for i in range(1, 5)] +
        #[os.path.join(indices_build_path, "indices", "bowtie1", species, assembly, release, seqtype, f"{species}.rev.{i}.ebwt") for i in range(1, 3)] +
        #[os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.{i}.bt2") for i in range(1, 5)] +
        #[os.path.join(indices_build_path, "indices", "bowtie2", species, assembly, release, seqtype, f"{species}.rev.{i}.bt2") for i in range(1, 3)],
        #os.path.join(indices_build_path, "indices", "bwa", species, assembly, release, seqtype, f"{species}.sa"),
        #os.path.join(indices_build_path, "indices", "star", species, assembly, release, seqtype, "SA"),
        #os.path.join(indices_build_path, "indices", "kallisto", species, assembly, release, seqtype, f"{species}.idx"),
        #expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless),
        #expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}_gene-transcript.txt"), file = anno_extensionless)

# downloads #######

# Index building ###########
rule decompress:
    input:
        fasta_files_gz = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}.gz"), file = only_fasta),
        gtf_file_gz = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf.gz"), file = anno_extensionless)

    output:
        fasta_files = expand(os.path.join(genome_download_path, species, assembly, release, seqtype, "{file}"), file = only_fasta),
        gtf_file = expand(os.path.join(genome_download_path, species, assembly, release, "annotation", "{file}.gtf"), file = anno_extensionless)

    run:
        shell(
            """
            gzip -df {input}
            """
            )




rule download_genome:
    output:
        expand(os.path.join(GENOME_DOWNLOAD_PATH, SPECIES, ASSEMBLY, RELEASE, SEQTYPE, "{file}"), file = fasta_download)
    run:
        if config["genome"]["fasta"]["download"]:
            print("\n\nI will now try to download the fasta file(s) and if already mentioned, CHECKSUMS...\n\n")
            for file in fasta_download:
                print(file)
                url = f"{BASE_URL}/{ASSEMBLYPATH}/{RELEASE}/fasta/{SPECIES}/{SEQTYPE}/{file}"
                filename = os.path.join(GENOME_DOWNLOAD_PATH, SPECIES, ASSEMBLY, RELEASE, SEQTYPE, file)
                urllib.request.urlretrieve(url, filename)
        else:
            print("Skipping download_genome rule.")


rule download_annotation:
    output:
        expand(os.path.join(GENOME_DOWNLOAD_PATH, SPECIES, ASSEMBLY, RELEASE, "annotation", "{file}"), file = anno_download)

    run:
        if config["genome"]["annotation"]["download"]:
            print("\n\nI will now try to download the annotation file(s) and if already mentioned, CHECKSUMS...\n\n")
            for file in anno_download:
                url = f"{BASE_URL}/{ASSEMBLYPATH}/{RELEASE}/gtf/{SPECIES}/{file}"
                filename = os.path.join(GENOME_DOWNLOAD_PATH, SPECIES, ASSEMBLY, RELEASE, "annotation", file)
                urllib.request.urlretrieve(url, filename)
        else:
            print("Skipping download_annotation rule.")